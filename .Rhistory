if(iter == 30){
P_mid = P1
}
if(iter == 60){
P_l = P1
}
}
iter = 0:iter
plot(iter, D, type='l', col=2, lwd = 2)
D
P_emp
Pt
## plotting
layout(matrix(c(1,2,3,3), 2, 2))
## side by side
plot(P_emp,type='h', main = "empirical distribution", ylim=c(0,0.2), col=2, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid()
plot(Pt,type='h', main = "true distribution", ylim=c(0,0.2), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid()
##upside down
plot(P_emp,type='h', main = "upside down", ylim=c(-0.2,0.2), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-Pt,type='h', ylim=c(-0.2,0.2), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=2,y=0.2, c("empirical","true"), col = c(2,4), lwd = c(2,2), cex = 0.3 )
## plotting
layout(matrix(c(1,2,3,3), 2, 2))
## side by side
plot(P_emp,type='h', main = "empirical distribution", ylim=c(0,0.2), col=2, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid()
plot(Pt,type='h', main = "true distribution", ylim=c(0,0.2), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid()
##upside down
plot(P_emp,type='h', main = "upside down", ylim=c(-0.2,0.2), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-Pt,type='h', ylim=c(-0.2,0.2), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=2,y=0.2, c("empirical","true"), col = c(2,4), lwd = c(2,2), cex = 0.7 )
P
par(mfrow=c(2,2))
plot(Pinit, type='h', main = "initial", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=2,y=0.2, c("empirical","true"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
plot(P_e, type='h', main = "early", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=2,y=0.2, c("empirical","true"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
plot(P_mid, type='h', main = "middle", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=2,y=0.2, c("empirical","true"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
plot(P_l, type='h', main = "late", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=2,y=0.2, c("empirical","true"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
par(mfrow=c(2,2))
plot(Pinit, type='h', main = "initial", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=20,y=1, c("empirical","true"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
plot(P_e, type='h', main = "early", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=20,y=1, c("empirical","true"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
plot(P_mid, type='h', main = "middle", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=20,y=1, c("empirical","true"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
plot(P_l, type='h', main = "late", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=20,y=1, c("empirical","true"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
par(mfrow=c(2,2))
plot(Pinit, type='h', main = "initial", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=20,y=1, c("P1","P"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
plot(P_e, type='h', main = "early", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=20,y=1, c("P1","P"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
plot(P_mid, type='h', main = "middle", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=20,y=1, c("P1","P"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
plot(P_l, type='h', main = "late", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=20,y=1, c("P1","P"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
plot(P1, type='h', main = "convergence", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=20,y=1, c("P1","P"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
#T = 1 ## temperature
Nsamples = 1000
## we need to repeat sampling many times so we're making a function, to make it easier ahead. It takes Nsamples = no. of samples needed (it'll discard 1st K though) and Temperature T as input
gibbs_sampler2 = function(Nsamples, x_init = NA, T=1){
samples = 0
if(is.na(x_init)){
x = X[sample(1:32,1),] # random start
} else{
x = X[x_init,]
}
for(k in 1:Nsamples){
# one sampling round
for(i in 1:N){
dE = h[i]
for(j in 1:N){
if(j!=i){
dE = dE + 2*J[i,j]*x[j]
}
}
dE = -2*dE/T
p = 1/(1+exp(dE)) ## in exp(2 *dE/2)  = exp(dE)
x[i] = 2*(runif(1)<p) - 1
}
#int_x = sum((x + 1)/2 * (2^((N-1):0)))
samples[k] = sum((x + 1)/2 * (2^((N-1):0)))
}
if(is.na(x_init)){
# ignore first K = 100 samples
if(Nsamples >=1000){
K = 100
} else{
K = round(Nsamples/10)
}
samples = samples[-1:-K] ## removed 1st K samples
}
samples
} ## some optimizations have been made for faster running
E = 0; P = 0
#vectorized implementation
E = array(-X%*%h - diag(X%*%J%*%t(X)))
P = exp(-E)
P = P/sum(P)
plot(E,type='h', col=2, lwd=3, xlab = "x", ylab = "E(x)"); abline(h=0)
grid();
plot(P,type='h', ylim=c(0,1), col=2, lwd=3, xlab = "x", ylab = "P(x)"); abline(h=0)
grid();
T = c(0.5,1,10,50,100,500)
ylims = c(1,1,0.5,0.15,0.1,0.1)
par(mfrow = c(2,3))
for(i in 1:6){
Pt = exp(-E/T[i]); Pt = Pt/sum(Pt)
plot(Pt, main = paste("Temp. T =",T[i]), type='h', ylim=c(0,ylims[i]), col=2, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0)
grid();
}
T = c(10,500)
ylims = c(0.5,0.1)
par(mfcol = c(1,2))
for(i in 1:2){
Pt = exp(-E/T[i]); Pt = Pt/sum(Pt)
plot(Pt, main = paste("Temp. T =",T[i]), type='h', ylim=c(0,ylims[i]), col=2, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0)
grid();
}
T = c(0.5,1:500)
H = 0
for(i in 1:501){
## entropy
Pt = exp(-E/T[i]); Pt = Pt/sum(Pt)
H[i] = sum(-Pt*log(Pt))
}
plot(T,H, type='l', lwd =2, col=2, ylim = c(0,4), ylab = "Entropy H", xlab = "Temp. T")
abline(h = log(32), lty=2)
axis(2, at = round(log(32),3) , cex.axis = 0.7)
grid()
#T = 1 ## temperature
Nsamples = 1000
## we need to repeat sampling many times so we're making a function, to make it easier ahead. It takes Nsamples = no. of samples needed (it'll discard 1st K though) and Temperature T as input
gibbs_sampler2 = function(Nsamples, x_init = NA, T=1){
samples = 0
if(is.na(x_init)){
x = X[sample(1:32,1),] # random start
} else{
x = X[x_init,]
}
for(k in 1:Nsamples){
# one sampling round
for(i in 1:N){
dE = h[i]
for(j in 1:N){
if(j!=i){
dE = dE + 2*J[i,j]*x[j]
}
}
dE = -2*dE/T
p = 1/(1+exp(dE)) ## in exp(2 *dE/2)  = exp(dE)
x[i] = 2*(runif(1)<p) - 1
}
#int_x = sum((x + 1)/2 * (2^((N-1):0)))
samples[k] = sum((x + 1)/2 * (2^((N-1):0)))
}
if(is.na(x_init)){
# ignore first K = 100 samples
if(Nsamples >=1000){
K = 100
} else{
K = round(Nsamples/10)
}
samples = samples[-1:-K] ## removed 1st K samples
}
samples
} ## some optimizations have been made for faster running
## sampling
samples = gibbs_sampler2(1000,NA) ### 1000 samples - K
## calculate the probabilities
P_emp = 0
for(i in 1:2^N){
P_emp[i] = length(which(samples == (i-1)))
}
P_emp = P_emp/sum(P_emp)
## plotting
par(mfrow = c(1,2))
plot(P_emp,type='h', main = "empirical distribution", ylim=c(0,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid()
plot(P,type='h', main = "true distribution", ylim=c(0,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid()
## sampling
samples = gibbs_sampler2(1000,NA) ### 1000 samples - K
## calculate the probabilities
P_emp = 0
for(i in 1:2^N){
P_emp[i] = length(which(samples == (i-1)))
}
P_emp = P_emp/sum(P_emp)
## plotting
par(mfrow = c(1,2))
plot(P_emp,type='h', main = "empirical distribution", ylim=c(0,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid()
plot(P,type='h', main = "true distribution", ylim=c(0,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid()
## sampling
samples = gibbs_sampler2(1000,NA) ### 1000 samples - K
## calculate the probabilities
P_emp = 0
for(i in 1:2^N){
P_emp[i] = length(which(samples == (i-1)))
}
P_emp = P_emp/sum(P_emp)
## plotting
par(mfrow = c(1,2))
plot(P_emp,type='h', main = "empirical distribution", ylim=c(0,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid()
plot(P,type='h', main = "true distribution", ylim=c(0,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid()
par(mfrow = c(1,2))
plot(P_emp,type='h', main="on top of other", ylim=c(0,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
T = TRUE
par(mfrow = c(1,2))
plot(P_emp,type='h', main="on top of other", ylim=c(0,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(P,type='h', ylim=c(0,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=2,y=1, c("empirical","true"), col = c(2,4), lwd = c(2,2), cex = 0.5 )
plot(P_emp,type='h', main="upside down", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=20,y=1, c("empirical","true"), col = c(2,4), lwd = c(2,2), cex = 0.5 )
T = TRUE
par(mfrow = c(1,2))
plot(P_emp,type='h', main="on top of other", ylim=c(0,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(P,type='h', ylim=c(0,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=2,y=1, c("empirical","true"), col = c(2,4), lwd = c(2,2), cex = 0.5 )
plot(P_emp,type='h', main="upside down", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=2,y=1, c("empirical","true"), col = c(2,4), lwd = c(2,2), cex = 0.5 )
## sampling
samples = gibbs_sampler2(1000,NA) ### 1000 samples - K
## calculate the probabilities
P_emp = 0
for(i in 1:2^N){
P_emp[i] = length(which(samples == (i-1)))
}
P_emp = P_emp/sum(P_emp)
## plotting
par(mfrow = c(1,2))
plot(P_emp,type='h', main = "empirical distribution", ylim=c(0,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid()
plot(P,type='h', main = "true distribution", ylim=c(0,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid()
## sampling
samples = gibbs_sampler2(1000,NA) ### 1000 samples - K
## calculate the probabilities
P_emp = 0
for(i in 1:2^N){
P_emp[i] = length(which(samples == (i-1)))
}
P_emp = P_emp/sum(P_emp)
## plotting
par(mfrow = c(1,2))
plot(P_emp,type='h', main = "empirical distribution", ylim=c(0,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid()
plot(P,type='h', main = "true distribution", ylim=c(0,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid()
par(mfrow = c(1,2))
plot(P_emp,type='h', main="on top of other", ylim=c(0,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(P,type='h', ylim=c(0,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=2,y=1, c("empirical","true"), col = c(2,4), lwd = c(2,2), cex = 0.5 )
plot(P_emp,type='h', main="upside down", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=20,y=1, c("empirical","true"), col = c(2,4), lwd = c(2,2), cex = 0.5 )
## sampling
## optimization for 10^6 samples
samples = gibbs_sampler2(1000, NA)
for(t in 2:1000){
samples = c(samples, gibbs_sampler2(1000, samples[length(samples)]))
}
## calculate the probabilities
P_emp = 0
for(i in 1:2^N){
P_emp[i] = length(which(samples == (i-1)))
}
P_emp = P_emp/sum(P_emp)
## plotting
T = TRUE
par(mfrow = c(2,2))
## side by side
plot(P_emp,type='h', main = "empirical distribution", ylim=c(0,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid()
plot(P,type='h', main = "true distribution", ylim=c(0,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid()
## on top and upside down
plot(P,type='h', ylim=c(0,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(P_emp,type='h', main = "one of top of other", ylim=c(0,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=2,y=1, c("empirical","true"), col = c(2,4), lwd = c(2,2), cex = 0.3 )
plot(P_emp,type='h', main = "upside down", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=2,y=1, c("empirical","true"), col = c(2,4), lwd = c(2,2), cex = 0.3 )
## sampling
## optimization for 10^6 samples
samples = gibbs_sampler2(1000, NA, T=500)
## calculate the probabilities
P_emp = 0
for(i in 1:2^N){
P_emp[i] = length(which(samples == (i-1)))
}
P_emp = P_emp/sum(P_emp)
T = 500
Pt = exp(-E/T); Pt = Pt/sum(Pt)
## plotting
layout(matrix(c(1,2,3,3), 2, 2))
## side by side
plot(P_emp,type='h', main = "empirical distribution", ylim=c(0,0.2), col=2, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid()
plot(Pt,type='h', main = "true distribution", ylim=c(0,0.2), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid()
##upside down
plot(P_emp,type='h', main = "upside down", ylim=c(-0.2,0.2), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-Pt,type='h', ylim=c(-0.2,0.2), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=2,y=0.2, c("empirical","true"), col = c(2,4), lwd = c(2,2), cex = 0.7 )
h1 = rnorm(N,0,5) # random h with mu = 0, sd = 5
J1 = array(rnorm(N^2,0,5), c(N,N))
J1 = (J1 + t(J1))/2  # to make J symmetric
#vectorized implementation
E1 = array(-X%*%h1 - diag(X%*%J1%*%t(X)))
P1 = exp(-E1)
Pinit = P1 = P1/sum(P1) ## initial distribution
D = sum(P*log(P/P1)) ## this is initial KL divergence D[P||P']
alp=0.1 ## learning rate
for(iter in 1:100){
## note X is a 2^N x N matrix (all possible states are row wise stored in this matrix)
Xp  = P%*%X ## vectorized way to do E[xi] over P
Xp1 = P1%*%X ## E[xi] over P1
XXp = t(X)%*%diag(P)%*%X ##vectorized E[xi xj] over P
XXp1 = t(X)%*%diag(P1)%*%X ## E[xi xj] over P1
dDdh = array(Xp1 - Xp)
dDdJ = XXp1 - XXp
Jnew = J1 - alp*dDdJ
hnew = h1 - alp*dDdh
Enew = array(-X%*%hnew - diag(X%*%Jnew%*%t(X)))
Pnew = exp(-Enew); Pnew = Pnew/sum(Pnew)
D[iter+1] = sum(P*log(P/Pnew))
J1 = Jnew
h1 = hnew
P1 = Pnew
if(iter == 10){
P_e = P1
}
if(iter == 30){
P_mid = P1
}
if(iter == 60){
P_l = P1
}
}
iter = 0:iter
plot(iter, D, type='l', col=2, lwd = 2)
h1 = rnorm(N,0,5) # random h with mu = 0, sd = 5
J1 = array(rnorm(N^2,0,5), c(N,N))
J1 = (J1 + t(J1))/2  # to make J symmetric
#vectorized implementation
E1 = array(-X%*%h1 - diag(X%*%J1%*%t(X)))
P1 = exp(-E1)
Pinit = P1 = P1/sum(P1) ## initial distribution
D = sum(P*log(P/P1)) ## this is initial KL divergence D[P||P']
alp=0.1 ## learning rate
for(iter in 1:100){
## note X is a 2^N x N matrix (all possible states are row wise stored in this matrix)
Xp  = P%*%X ## vectorized way to do E[xi] over P
Xp1 = P1%*%X ## E[xi] over P1
XXp = t(X)%*%diag(P)%*%X ##vectorized E[xi xj] over P
XXp1 = t(X)%*%diag(P1)%*%X ## E[xi xj] over P1
dDdh = array(Xp1 - Xp)
dDdJ = XXp1 - XXp
Jnew = J1 - alp*dDdJ
hnew = h1 - alp*dDdh
Enew = array(-X%*%hnew - diag(X%*%Jnew%*%t(X)))
Pnew = exp(-Enew); Pnew = Pnew/sum(Pnew)
D[iter+1] = sum(P*log(P/Pnew))
J1 = Jnew
h1 = hnew
P1 = Pnew
if(iter == 10){
P_e = P1
}
if(iter == 30){
P_mid = P1
}
if(iter == 60){
P_l = P1
}
}
iter = 0:iter
plot(iter, D, type='l', col=2, lwd = 2)
par(mfrow=c(2,2))
plot(Pinit, type='h', main = "initial", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=20,y=1, c("P1","P"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
plot(P_e, type='h', main = "early", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=20,y=1, c("P1","P"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
plot(P_mid, type='h', main = "middle", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=20,y=1, c("P1","P"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
plot(P_l, type='h', main = "late", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=20,y=1, c("P1","P"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
par(mfrow=c(2,2))
plot(Pinit, type='h', main = "initial", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=25,y=-0.5, c("P1","P"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
plot(P_e, type='h', main = "early", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=25,y=-0.5, c("P1","P"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
plot(P_mid, type='h', main = "middle", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=25,y=-0.5, c("P1","P"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
plot(P_l, type='h', main = "late", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=25,y=-0.5, c("P1","P"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
par(mfrow=c(2,2))
plot(Pinit, type='h', main = "initial", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=27,y=-0.4, c("P1","P"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
plot(P_e, type='h', main = "early", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=27,y=-0.4, c("P1","P"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
plot(P_mid, type='h', main = "middle", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=27,y=-0.4, c("P1","P"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
plot(P_l, type='h', main = "late", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=27,y=-0.4, c("P1","P"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
plot(P1, type='h', main = "convergence", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=20,y=1, c("P1","P"), col = c(2,4), lwd = c(2,2), cex = 0.4 )
plot(P1, type='h', main = "convergence", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=20,y=1, c("P1","P"), col = c(2,4), lwd = c(2,2), cex = 0.7 )
plot(P1, type='h', main = "convergence", ylim=c(-1,1), col=2, lwd=3, xlab = "x", ylab = "P(x)")
par(new=T)
plot(-P ,type='h', ylim=c(-1,1), col=4, lwd=3, xlab = "x", ylab = "P(x)")
abline(h=0); grid(); legend(x=26,y=1, c("P1","P"), col = c(2,4), lwd = c(2,2), cex = 0.7 )
A = diag(2)
A[1,2] = A[2,1] = -0.99
A
eigen(A)
v = matrix(c(-1,1,-1,-1),c(2,2))
v
v = v/sqrt(2)
D = diag(c(1.999,0.001))
sum(D)
v%*%D%*%t(v)
D = diag(c(0.999,0.001))
v%*%D%*%t(v)
det(D)
D = diag(c(1.99,0.01))
v%*%D%*%t(v)
D
eigen(A)
